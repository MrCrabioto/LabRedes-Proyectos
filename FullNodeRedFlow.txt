[
    {
        "id": "34880d6535a909df",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a3c4debc80a6dc8b",
        "type": "modbus-read",
        "z": "34880d6535a909df",
        "name": "Read from Weather Sensor",
        "topic": "WeatherSense",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "0",
        "quantity": "11",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "47586a01ab3056e2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "b078296757bd02fa"
            ],
            []
        ]
    },
    {
        "id": "d94cb3fcb1ac8677",
        "type": "debug",
        "z": "34880d6535a909df",
        "name": "Reading",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "b078296757bd02fa",
        "type": "function",
        "z": "34880d6535a909df",
        "name": "Data Processor",
        "func": "let reg = msg.payload;\n\n// Combinar registros\nlet temp_raw = (reg[0] << 16) + reg[1];\nlet hum_raw = (reg[2] << 16) + reg[3];\nlet press_raw = (reg[4] << 16) + reg[5];\nlet light_raw = (reg[6] << 16) + reg[7];\nlet wind_min_raw = (reg[8] << 16) + reg[9];\nlet wind_max_raw = (reg[10] << 16) + reg[11];\n\nlet temperature = temp_raw / 1000;\nlet humidity = hum_raw / 1000;\nlet pressure = press_raw / 100000;\n\n\n// Salida principal con todos los datos\nlet msgAll = {\n    payload: {\n        temperature: temperature,\n        humidity: humidity,\n        pressure: pressure,\n        light: light_raw,\n        wind_dir_min: wind_min_raw / 1000,\n        wind_dir_max: wind_max_raw / 1000\n    },\n    topic: \"bloque_1\"\n};\n\n// Salida secundaria con solo temperatura para el chart\nlet msgTemp = {\n    payload: temperature,\n    topic: \"temperature\"\n};\nlet msgHum = {\n    payload: humidity,\n    topic: \"humidity\"\n};\nlet msgPressure = {\n    payload: pressure,\n    topic: \"pressure\"\n};\n\n// return como arreglo para múltiples salidas\nreturn [msgAll, msgTemp, msgHum, msgPressure];",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "d94cb3fcb1ac8677",
                "9f38b58d3fc1d56a"
            ],
            [
                "ee52b5b1d6d02d5e",
                "20b1752128e7a9a9"
            ],
            [
                "a4111e25eab3a26c",
                "3d0d0a40216fb3dd"
            ],
            [
                "bfa7acc0621fd515"
            ]
        ]
    },
    {
        "id": "2766d0336822e514",
        "type": "modbus-read",
        "z": "34880d6535a909df",
        "name": "Read from Weather Sensor",
        "topic": "WeatherSense",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "12",
        "quantity": "12",
        "rate": "2.1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "47586a01ab3056e2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 450,
        "y": 300,
        "wires": [
            [
                "48cb61713c61a4cf"
            ],
            []
        ]
    },
    {
        "id": "48cb61713c61a4cf",
        "type": "function",
        "z": "34880d6535a909df",
        "name": "Data Processor",
        "func": "let reg = msg.payload;\n\nlet wind_dir_avg = (reg[0] << 16) + reg[1];\nlet wind_speed_min = (reg[2] << 16) + reg[3];\nlet wind_speed_max = (reg[4] << 16) + reg[5];\nlet wind_speed_avg = (reg[6] << 16) + reg[7];\nlet rain_accum = (reg[8] << 16) + reg[9];\nlet rain_duration = (reg[10] << 16) + reg[11];\n\nlet wind_dir_avg_val = wind_dir_avg / 1000;\nlet wind_speed = wind_dir_avg / 10000;\n\n// Mensaje completo con todos los datos\nlet msgAll = {\n    payload: {\n        wind_dir_avg: wind_dir_avg_val,\n        wind_speed_min: wind_speed_min / 100,\n        wind_speed_max: wind_speed_max / 100,\n        wind_speed_avg: wind_speed_avg / 1000,\n        rain_accumulated: rain_accum / 100,\n        rain_duration: rain_duration\n    },\n    topic: \"bloque_2\"\n};\n\n// Solo para el chart\nlet msgWindDir = {\n    payload: wind_dir_avg_val,\n    topic: \"wind_dir_avg\"\n};\n\nlet msgWindSpeed= {\n    payload: wind_speed,\n    topic: \"wind_speed_avg\"\n};\n\nreturn [msgAll, msgWindDir, msgWindSpeed];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [
                "f29e2607b131e4d9",
                "9f38b58d3fc1d56a"
            ],
            [
                "8f3be1cfd53651e9"
            ],
            [
                "2d882ccc1ab15440"
            ]
        ]
    },
    {
        "id": "f29e2607b131e4d9",
        "type": "debug",
        "z": "34880d6535a909df",
        "name": "Reading",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "105ebedc50e423fa",
        "type": "modbus-read",
        "z": "34880d6535a909df",
        "name": "Read from Weather Sensor",
        "topic": "WeatherSense",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "InputRegister",
        "adr": "24",
        "quantity": "8",
        "rate": "2.2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "47586a01ab3056e2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 450,
        "y": 380,
        "wires": [
            [
                "2898140c0a492efe"
            ],
            []
        ]
    },
    {
        "id": "2898140c0a492efe",
        "type": "function",
        "z": "34880d6535a909df",
        "name": "Data Processor",
        "func": "let reg = msg.payload;\n\nlet rain_intensity = (reg[0] << 16) + reg[1];\nlet rain_intensity_max = (reg[2] << 16) + reg[3];\nlet heating_temp = (reg[4] << 16) + reg[5];\nlet dumping_state = (reg[6] << 16) + reg[7];\n\nmsg.payload = {\n    rain_intensity: rain_intensity / 100,\n    rain_intensity_max: rain_intensity_max / 100,\n    heating_temp: heating_temp / 1000,\n    dumping_state: dumping_state\n};\n\nmsg.topic = \"bloque_3\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 380,
        "wires": [
            [
                "f12f688145a63d97",
                "9f38b58d3fc1d56a"
            ]
        ]
    },
    {
        "id": "f12f688145a63d97",
        "type": "debug",
        "z": "34880d6535a909df",
        "name": "Reading",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 380,
        "wires": []
    },
    {
        "id": "2dab0281ed61c2cd",
        "type": "http request",
        "z": "34880d6535a909df",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://proyecto-redes-ibero2.azurewebsites.net/api/lectura_sensor",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 620,
        "wires": [
            [
                "bd718589f32c7ed4"
            ]
        ]
    },
    {
        "id": "bd0c1eb35e7c4143",
        "type": "function",
        "z": "34880d6535a909df",
        "name": "JSON Header Creator",
        "func": "const device_id = \"WeatherStation01\";\nconst ubicacion = \"IDIT\";\n\n// Fusiona todos los bloques en un solo objeto plano\nlet bloques = msg.payload;\nlet datos = {};\n\nfor (let bloque in bloques) {\n    if (typeof bloques[bloque] === \"object\") {\n        Object.assign(datos, bloques[bloque]);\n    }\n}\n\nlet mensajes = [];\n\nfor (let key in datos) {\n    const valor = datos[key];\n\n    // Validación estricta: solo si es número válido\n    if (typeof valor === \"number\" && !isNaN(valor)) {\n        mensajes.push({\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            payload: {\n                device_id: device_id,\n                sensor_type: key,\n                value: valor,\n                ubicacion: ubicacion\n            }\n        });\n    }\n}\n\n// Si no hay valores válidos, no envíes nada\nif (mensajes.length === 0) {\n    node.warn(\"No se encontraron valores numéricos válidos\");\n    return null;\n}\n\nreturn [mensajes];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 620,
        "wires": [
            [
                "84159b772520f5da",
                "2dab0281ed61c2cd"
            ]
        ]
    },
    {
        "id": "bd718589f32c7ed4",
        "type": "debug",
        "z": "34880d6535a909df",
        "name": "Request Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 620,
        "wires": []
    },
    {
        "id": "9f38b58d3fc1d56a",
        "type": "join",
        "z": "34880d6535a909df",
        "name": "Package Join",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "5",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 960,
        "y": 500,
        "wires": [
            [
                "d7d292e57c27a4ba"
            ]
        ]
    },
    {
        "id": "d7d292e57c27a4ba",
        "type": "debug",
        "z": "34880d6535a909df",
        "name": "Join Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "84159b772520f5da",
        "type": "debug",
        "z": "34880d6535a909df",
        "name": "Header Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 720,
        "wires": []
    },
    {
        "id": "ee52b5b1d6d02d5e",
        "type": "ui_chart",
        "z": "34880d6535a909df",
        "name": "",
        "group": "3c954e0afd16075a",
        "order": 0,
        "width": "12",
        "height": "8",
        "label": "Temperatura Ambiental",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data available",
        "dot": false,
        "ymin": "-10",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#b31e52",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1250,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "20b1752128e7a9a9",
        "type": "ui_gauge",
        "z": "34880d6535a909df",
        "name": "",
        "group": "3c954e0afd16075a",
        "order": 2,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Temperatura Ambiental",
        "label": "°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "50",
        "colors": [
            "#00b3b0",
            "#00e626",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "30",
        "diff": false,
        "className": "",
        "x": 1310,
        "y": 160,
        "wires": []
    },
    {
        "id": "a4111e25eab3a26c",
        "type": "ui_gauge",
        "z": "34880d6535a909df",
        "name": "",
        "group": "3c954e0afd16075a",
        "order": 3,
        "width": "6",
        "height": "6",
        "gtype": "gage",
        "title": "Humedad Relativa",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#e1c50e",
            "#00e639",
            "#3a84cb"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1290,
        "y": 200,
        "wires": []
    },
    {
        "id": "bfa7acc0621fd515",
        "type": "ui_chart",
        "z": "34880d6535a909df",
        "name": "",
        "group": "6dfe5cd1d67861f5",
        "order": 3,
        "width": "12",
        "height": "6",
        "label": "Presión Atmosférica",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data available",
        "dot": false,
        "ymin": "0",
        "ymax": "2000",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#b31e52",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1240,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3d0d0a40216fb3dd",
        "type": "ui_chart",
        "z": "34880d6535a909df",
        "name": "",
        "group": "3c954e0afd16075a",
        "order": 0,
        "width": "12",
        "height": "8",
        "label": "Humedad Relativa",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No data available",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#b31e52",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8f3be1cfd53651e9",
        "type": "ui_gauge",
        "z": "34880d6535a909df",
        "name": "",
        "group": "6dfe5cd1d67861f5",
        "order": 1,
        "width": "8",
        "height": "8",
        "gtype": "compass",
        "title": "Dirección del Viento",
        "label": "Grados Cardinales",
        "format": "{{value}}",
        "min": "360",
        "max": "0",
        "colors": [
            "#0e86e1",
            "#8a00e6",
            "#cb3a3a"
        ],
        "seg1": "90",
        "seg2": "180",
        "diff": false,
        "className": "",
        "x": 1300,
        "y": 240,
        "wires": []
    },
    {
        "id": "2a16f3711241c6d4",
        "type": "serial in",
        "z": "34880d6535a909df",
        "name": "",
        "serial": "cef9d0fda41d10ce",
        "x": 240,
        "y": 580,
        "wires": [
            [
                "31e660b483046aff"
            ]
        ]
    },
    {
        "id": "31e660b483046aff",
        "type": "function",
        "z": "34880d6535a909df",
        "name": "Data Processor",
        "func": "// Convertir la cadena JSON a objeto\nlet datos = JSON.parse(msg.payload);\n\n// Crear 3 mensajes independientes para cada valor\nlet msg1 = { payload: parseInt(datos.pm1_0) };   // elimina 'ug/m3'\nlet msg2 = { payload: parseInt(datos.pm2_5) };\nlet msg3 = { payload: parseInt(datos.pm10) };\n\n// Enviar como array (se conecta a un nodo \"split\" tipo 'gauge' múltiple o 'debug')\nreturn [msg1, msg2, msg3];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 580,
        "wires": [
            [
                "24803553f00c5b16"
            ],
            [
                "b404fd5c15d8961a"
            ],
            [
                "978c4c9847310cf1"
            ]
        ]
    },
    {
        "id": "24803553f00c5b16",
        "type": "ui_text",
        "z": "34880d6535a909df",
        "group": "0af32f63654043ac",
        "order": 0,
        "width": "2",
        "height": "3",
        "name": "",
        "label": "PM 1.0",
        "format": "{{msg.payload}} ug/m3",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 700,
        "y": 540,
        "wires": []
    },
    {
        "id": "b404fd5c15d8961a",
        "type": "ui_text",
        "z": "34880d6535a909df",
        "group": "0af32f63654043ac",
        "order": 0,
        "width": "2",
        "height": "3",
        "name": "",
        "label": "PM 2.5",
        "format": "{{msg.payload}} ug/m3",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 700,
        "y": 580,
        "wires": []
    },
    {
        "id": "978c4c9847310cf1",
        "type": "ui_text",
        "z": "34880d6535a909df",
        "group": "0af32f63654043ac",
        "order": 0,
        "width": "2",
        "height": "3",
        "name": "",
        "label": "PM 10",
        "format": "{{msg.payload}} ug/m3",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "2d882ccc1ab15440",
        "type": "ui_text",
        "z": "34880d6535a909df",
        "group": "6dfe5cd1d67861f5",
        "order": 2,
        "width": "6",
        "height": "2",
        "name": "",
        "label": "Velocidad",
        "format": "{{msg.payload}} km/h",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1260,
        "y": 280,
        "wires": []
    },
    {
        "id": "47586a01ab3056e2",
        "type": "modbus-client",
        "name": "LocalPortWeather",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": 502,
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU",
        "serialBaudrate": 9600,
        "serialDatabits": 8,
        "serialStopbits": 1,
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 0,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3c954e0afd16075a",
        "type": "ui_group",
        "name": "Temperatura y Humedad",
        "tab": "38a5b880580d14d9",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6dfe5cd1d67861f5",
        "type": "ui_group",
        "name": "Viento",
        "tab": "38a5b880580d14d9",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cef9d0fda41d10ce",
        "type": "serial-port",
        "name": "Serial Port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": "115200",
        "databits": 8,
        "parity": "none",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": 10000
    },
    {
        "id": "0af32f63654043ac",
        "type": "ui_group",
        "name": "Calidad del Aire",
        "tab": "38a5b880580d14d9",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "38a5b880580d14d9",
        "type": "ui_tab",
        "name": "IBERO Puebla Estación Climática",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]